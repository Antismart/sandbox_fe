generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Farmer {
  id          String   @id @default(cuid())
  phoneNumber String   @unique
  location    String
  kycStatus   String   @default("pending") // pending, verified, rejected
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  policies Policy[]

  @@map("farmers")
}

model Policy {
  id             String    @id @default(cuid())
  farmerId       String
  cropType       String
  coverageAmount Int       // Amount in KES (cents)
  premium        Int       // Premium in KES (cents)
  startDate      DateTime
  endDate        DateTime
  status         String    @default("pending") // pending, active, expired, claimed
  flowPolicyId   String?   @unique // Reference to Flow blockchain policy
  location       String    // Specific location for weather monitoring
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  farmer   Farmer    @relation(fields: [farmerId], references: [id])
  claims   Claim[]
  payments Payment[]

  @@map("policies")
}

model Payment {
  id               String    @id @default(cuid())
  policyId         String?
  claimId          String?
  onramperTxId     String    @unique
  amount           Int       // Amount in smallest currency unit (cents/cents)
  currency         String    // KES, USDC, etc.
  type             String    // premium, payout
  status           String    @default("pending") // pending, completed, failed
  mpesaReceiptCode String?
  failureReason    String?
  processedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  policy Policy? @relation(fields: [policyId], references: [id])
  claim  Claim?  @relation(fields: [claimId], references: [id])

  @@map("payments")
}

model Claim {
  id               String    @id @default(cuid())
  policyId         String
  triggerCondition String    // Description of what triggered the claim
  triggerData      Json      // Weather data that triggered the claim
  payoutAmount     Int       // Amount in USDC cents
  status           String    @default("pending") // pending, approved, paid, rejected
  processedAt      DateTime?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  policy   Policy    @relation(fields: [policyId], references: [id])
  payments Payment[]

  @@map("claims")
}

model WeatherData {
  id          String   @id @default(cuid())
  location    String
  timestamp   DateTime
  temperature Float    // Celsius
  rainfall    Float    // mm
  humidity    Float?   // percentage
  windSpeed   Float?   // km/h
  source      String   @default("weatherxm")
  rawData     Json?    // Original response from weather API
  createdAt   DateTime @default(now())

  @@map("weather_data")
  @@index([location, timestamp])
}

model LiquidityProvider {
  id              String   @id @default(cuid())
  walletAddress   String   @unique
  totalContributed Int     // USDC in cents
  currentBalance   Int     // USDC in cents
  rewardsEarned    Int     // USDC in cents
  joinedAt        DateTime @default(now())
  lastRewardAt    DateTime?

  @@map("liquidity_providers")
}

model SystemConfig {
  id    String @id
  value Json
  updatedAt DateTime @updatedAt

  @@map("system_config")
}